#!/usr/bin/env python3
"""
system_libraries_demo.py

Showcases common Python standard library modules with basic examples, no user input needed.
"""

import sys
import os
import subprocess
import logging
import datetime
import re
import math
import random

# Configure logging (from the standard library) to log to console
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)

logger = logging.getLogger("StdLibDemo")

def main():
    # sys module demo
    logger.info("=== sys module demo ===")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Platform: {sys.platform}")
    # sys.argv typically holds command-line arguments, but we won't parse them here.

    # os module demo
    logger.info("=== os module demo ===")
    current_dir = os.getcwd()
    logger.info(f"Current working directory: {current_dir}")
    env_vars = dict(os.environ)  # Convert environment variables to a dict
    logger.info(f"Number of environment variables: {len(env_vars)}")

    # subprocess module demo
    # We'll do a simple cross-platform "echo" or "dir/ls" depending on OS
    logger.info("=== subprocess module demo ===")
    try:
        if os.name == 'nt':
            # Windows
            result = subprocess.run(["cmd", "/c", "echo Hello from subprocess"], capture_output=True, text=True)
        else:
            # Unix-like
            result = subprocess.run(["echo", "Hello from subprocess"], capture_output=True, text=True)

        logger.info(f"Subprocess output: {result.stdout.strip()}")
    except Exception as e:
        logger.error(f"Subprocess failed: {e}")

    # datetime module demo
    logger.info("=== datetime module demo ===")
    now = datetime.datetime.now()
    formatted = now.strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"Current date/time: {formatted}")

    # re (Regular Expressions) demo
    logger.info("=== re (regex) module demo ===")
    text = "Sample email: test.user@example.com"
    pattern = r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"
    match = re.search(pattern, text)
    if match:
        logger.info(f"Found an email address in text: {match.group(0)}")
    else:
        logger.info("No email found in text.")

    # math module demo
    logger.info("=== math module demo ===")
    angle = math.radians(45)  # convert 45 degrees to radians
    logger.info(f"sin(45Â°) = {math.sin(angle):.4f}")
    logger.info(f"sqrt(16) = {math.sqrt(16)}")

    # random module demo
    logger.info("=== random module demo ===")
    random_numbers = [random.randint(1, 100) for _ in range(5)]
    logger.info(f"5 random integers from 1 to 100: {random_numbers}")

    logger.info("=== Demo completed ===")


if __name__ == "__main__":
    main()
